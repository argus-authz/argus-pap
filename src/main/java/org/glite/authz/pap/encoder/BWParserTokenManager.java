/* Generated By:JavaCC: Do not edit this line. BWParserTokenManager.java */
package org.glite.authz.pap.encoder;

import java.lang.String;
import org.glite.authz.pap.ui.wizard.*;
import org.opensaml.xacml.XACMLObject;
import java.util.List;

public class BWParserTokenManager implements BWParserConstants {
    public static java.io.PrintStream debugStream = System.out;

    public static void setDebugStream(java.io.PrintStream ds) {
	debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
	switch (pos) {
	case 0:
	    if ((active0 & 0x1fffc0L) != 0L) {
		jjmatchedKind = 23;
		return 18;
	    }
	    return -1;
	case 1:
	    if ((active0 & 0x1f79c0L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 1;
		return 18;
	    }
	    if ((active0 & 0x8600L) != 0L)
		return 18;
	    return -1;
	case 2:
	    if ((active0 & 0x10000L) != 0L)
		return 18;
	    if ((active0 & 0x1e79c0L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 2;
		return 18;
	    }
	    return -1;
	case 3:
	    if ((active0 & 0x180L) != 0L)
		return 18;
	    if ((active0 & 0x1e7840L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 3;
		return 18;
	    }
	    return -1;
	case 4:
	    if ((active0 & 0x1e3800L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 4;
		return 18;
	    }
	    if ((active0 & 0x4040L) != 0L)
		return 18;
	    return -1;
	case 5:
	    if ((active0 & 0x80000L) != 0L)
		return 18;
	    if ((active0 & 0x163800L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 5;
		return 18;
	    }
	    return -1;
	case 6:
	    if ((active0 & 0x100000L) != 0L)
		return 18;
	    if ((active0 & 0x63800L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 6;
		return 18;
	    }
	    return -1;
	case 7:
	    if ((active0 & 0x21000L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 7;
		return 18;
	    }
	    if ((active0 & 0x800L) != 0L)
		return 18;
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 8:
	    if ((active0 & 0x1000L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 8;
		return 18;
	    }
	    if ((active0 & 0x20000L) != 0L)
		return 18;
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 9:
	    if ((active0 & 0x1000L) != 0L) {
		jjmatchedKind = 23;
		jjmatchedPos = 9;
		return 18;
	    }
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 10:
	    if ((active0 & 0x1000L) != 0L)
		return 18;
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 11:
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 12:
	    if ((active0 & 0x42000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 13:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 14:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 15:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 16:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 17:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 18:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 19:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 20:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 21:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	case 22:
	    if ((active0 & 0x2000L) != 0L) {
		if (jjmatchedPos < 6) {
		    jjmatchedKind = 23;
		    jjmatchedPos = 6;
		}
		return -1;
	    }
	    return -1;
	default:
	    return -1;
	}
    }

    private static final int jjStartNfa_0(int pos, long active0) {
	return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private final int jjStopAtPos(int pos, int kind) {
	jjmatchedKind = kind;
	jjmatchedPos = pos;
	return pos + 1;
    }

    static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
	jjmatchedKind = kind;
	jjmatchedPos = pos;
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    return pos + 1;
	}
	return jjMoveNfa_0(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_0() {
	switch (curChar) {
	case 40:
	    return jjStopAtPos(0, 29);
	case 41:
	    return jjStopAtPos(0, 31);
	case 58:
	    return jjStopAtPos(0, 30);
	case 61:
	    return jjStopAtPos(0, 28);
	case 91:
	    return jjStopAtPos(0, 24);
	case 93:
	    return jjStopAtPos(0, 25);
	case 97:
	    return jjMoveStringLiteralDfa1_0(0x40L);
	case 98:
	    return jjMoveStringLiteralDfa1_0(0x20000L);
	case 99:
	    return jjMoveStringLiteralDfa1_0(0x1000L);
	case 100:
	    return jjMoveStringLiteralDfa1_0(0x280L);
	case 101:
	    return jjMoveStringLiteralDfa1_0(0x80000L);
	case 102:
	    return jjMoveStringLiteralDfa1_0(0x100L);
	case 103:
	    return jjMoveStringLiteralDfa1_0(0x400L);
	case 110:
	    return jjMoveStringLiteralDfa1_0(0x8000L);
	case 112:
	    return jjMoveStringLiteralDfa1_0(0x104000L);
	case 114:
	    return jjMoveStringLiteralDfa1_0(0x800L);
	case 115:
	    return jjMoveStringLiteralDfa1_0(0x42000L);
	case 121:
	    return jjMoveStringLiteralDfa1_0(0x10000L);
	case 123:
	    return jjStopAtPos(0, 26);
	case 125:
	    return jjStopAtPos(0, 27);
	default:
	    return jjMoveNfa_0(0, 0);
	}
    }

    static private final int jjMoveStringLiteralDfa1_0(long active0) {
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(0, active0);
	    return 1;
	}
	switch (curChar) {
	case 97:
	    if ((active0 & 0x400L) != 0L)
		return jjStartNfaWithStates_0(1, 10, 18);
	    break;
	case 101:
	    return jjMoveStringLiteralDfa2_0(active0, 0x53880L);
	case 105:
	    return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
	case 108:
	    return jjMoveStringLiteralDfa2_0(active0, 0x20040L);
	case 110:
	    if ((active0 & 0x200L) != 0L)
		return jjStartNfaWithStates_0(1, 9, 18);
	    break;
	case 111:
	    if ((active0 & 0x8000L) != 0L)
		return jjStartNfaWithStates_0(1, 15, 18);
	    break;
	case 113:
	    return jjMoveStringLiteralDfa2_0(active0, 0x100L);
	case 114:
	    return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
	case 120:
	    return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
	default:
	    break;
	}
	return jjStartNfa_0(0, active0);
    }

    static private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(0, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(1, active0);
	    return 2;
	}
	switch (curChar) {
	case 97:
	    return jjMoveStringLiteralDfa3_0(active0, 0x20100L);
	case 99:
	    return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
	case 105:
	    return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
	case 108:
	    return jjMoveStringLiteralDfa3_0(active0, 0x4040L);
	case 110:
	    return jjMoveStringLiteralDfa3_0(active0, 0x80L);
	case 114:
	    return jjMoveStringLiteralDfa3_0(active0, 0x43000L);
	case 115:
	    if ((active0 & 0x10000L) != 0L)
		return jjStartNfaWithStates_0(2, 16, 18);
	    return jjMoveStringLiteralDfa3_0(active0, 0x800L);
	default:
	    break;
	}
	return jjStartNfa_0(1, active0);
    }

    static private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(1, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(2, active0);
	    return 3;
	}
	switch (curChar) {
	case 99:
	    return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
	case 101:
	    return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
	case 110:
	    if ((active0 & 0x100L) != 0L)
		return jjStartNfaWithStates_0(3, 8, 18);
	    break;
	case 111:
	    return jjMoveStringLiteralDfa4_0(active0, 0x4840L);
	case 116:
	    return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
	case 118:
	    return jjMoveStringLiteralDfa4_0(active0, 0x142000L);
	case 121:
	    if ((active0 & 0x80L) != 0L)
		return jjStartNfaWithStates_0(3, 7, 18);
	    break;
	default:
	    break;
	}
	return jjStartNfa_0(2, active0);
    }

    static private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(2, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(3, active0);
	    return 4;
	}
	switch (curChar) {
	case 97:
	    return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
	case 105:
	    return jjMoveStringLiteralDfa5_0(active0, 0x43000L);
	case 107:
	    return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
	case 112:
	    return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
	case 116:
	    if ((active0 & 0x4000L) != 0L)
		return jjStartNfaWithStates_0(4, 14, 18);
	    break;
	case 117:
	    return jjMoveStringLiteralDfa5_0(active0, 0x800L);
	case 119:
	    if ((active0 & 0x40L) != 0L)
		return jjStartNfaWithStates_0(4, 6, 18);
	    break;
	default:
	    break;
	}
	return jjStartNfa_0(3, active0);
    }

    static private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(3, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(4, active0);
	    return 5;
	}
	switch (curChar) {
	case 99:
	    return jjMoveStringLiteralDfa6_0(active0, 0x42000L);
	case 102:
	    return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
	case 108:
	    return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
	case 114:
	    return jjMoveStringLiteralDfa6_0(active0, 0x800L);
	case 116:
	    if ((active0 & 0x80000L) != 0L)
		return jjStartNfaWithStates_0(5, 19, 18);
	    return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
	default:
	    break;
	}
	return jjStartNfa_0(4, active0);
    }

    static private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(4, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(5, active0);
	    return 6;
	}
	switch (curChar) {
	case 99:
	    return jjMoveStringLiteralDfa7_0(active0, 0x800L);
	case 101:
	    if ((active0 & 0x100000L) != 0L)
		return jjStartNfaWithStates_0(6, 20, 18);
	    return jjMoveStringLiteralDfa7_0(active0, 0x42000L);
	case 105:
	    return jjMoveStringLiteralDfa7_0(active0, 0x21000L);
	default:
	    break;
	}
	return jjStartNfa_0(5, active0);
    }

    static private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(5, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(6, active0);
	    return 7;
	}
	switch (curChar) {
	case 95:
	    return jjMoveStringLiteralDfa8_0(active0, 0x42000L);
	case 99:
	    return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
	case 101:
	    if ((active0 & 0x800L) != 0L)
		return jjStartNfaWithStates_0(7, 11, 18);
	    break;
	case 115:
	    return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
	default:
	    break;
	}
	return jjStartNfa_0(6, active0);
    }

    static private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(6, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(7, active0);
	    return 8;
	}
	switch (curChar) {
	case 97:
	    return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
	case 99:
	    return jjMoveStringLiteralDfa9_0(active0, 0x42000L);
	case 116:
	    if ((active0 & 0x20000L) != 0L)
		return jjStartNfaWithStates_0(8, 17, 18);
	    break;
	default:
	    break;
	}
	return jjStartNfa_0(7, active0);
    }

    static private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(7, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(8, active0);
	    return 9;
	}
	switch (curChar) {
	case 108:
	    return jjMoveStringLiteralDfa10_0(active0, 0x42000L);
	case 116:
	    return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
	default:
	    break;
	}
	return jjStartNfa_0(8, active0);
    }

    static private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(8, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(9, active0);
	    return 10;
	}
	switch (curChar) {
	case 97:
	    return jjMoveStringLiteralDfa11_0(active0, 0x42000L);
	case 101:
	    if ((active0 & 0x1000L) != 0L)
		return jjStartNfaWithStates_0(10, 12, 18);
	    break;
	default:
	    break;
	}
	return jjStartNfa_0(9, active0);
    }

    static private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(9, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(10, active0);
	    return 11;
	}
	switch (curChar) {
	case 115:
	    return jjMoveStringLiteralDfa12_0(active0, 0x42000L);
	default:
	    break;
	}
	return jjStartNfa_0(10, active0);
    }

    static private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(10, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(11, active0);
	    return 12;
	}
	switch (curChar) {
	case 115:
	    if ((active0 & 0x40000L) != 0L) {
		jjmatchedKind = 18;
		jjmatchedPos = 12;
	    }
	    return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(11, active0);
    }

    static private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(11, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(12, active0);
	    return 13;
	}
	switch (curChar) {
	case 95:
	    return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(12, active0);
    }

    static private final int jjMoveStringLiteralDfa14_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(12, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(13, active0);
	    return 14;
	}
	switch (curChar) {
	case 97:
	    return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(13, active0);
    }

    static private final int jjMoveStringLiteralDfa15_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(13, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(14, active0);
	    return 15;
	}
	switch (curChar) {
	case 115:
	    return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(14, active0);
    }

    static private final int jjMoveStringLiteralDfa16_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(14, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(15, active0);
	    return 16;
	}
	switch (curChar) {
	case 115:
	    return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(15, active0);
    }

    static private final int jjMoveStringLiteralDfa17_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(15, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(16, active0);
	    return 17;
	}
	switch (curChar) {
	case 105:
	    return jjMoveStringLiteralDfa18_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(16, active0);
    }

    static private final int jjMoveStringLiteralDfa18_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(16, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(17, active0);
	    return 18;
	}
	switch (curChar) {
	case 103:
	    return jjMoveStringLiteralDfa19_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(17, active0);
    }

    static private final int jjMoveStringLiteralDfa19_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(17, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(18, active0);
	    return 19;
	}
	switch (curChar) {
	case 110:
	    return jjMoveStringLiteralDfa20_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(18, active0);
    }

    static private final int jjMoveStringLiteralDfa20_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(18, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(19, active0);
	    return 20;
	}
	switch (curChar) {
	case 109:
	    return jjMoveStringLiteralDfa21_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(19, active0);
    }

    static private final int jjMoveStringLiteralDfa21_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(19, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(20, active0);
	    return 21;
	}
	switch (curChar) {
	case 101:
	    return jjMoveStringLiteralDfa22_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(20, active0);
    }

    static private final int jjMoveStringLiteralDfa22_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(20, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(21, active0);
	    return 22;
	}
	switch (curChar) {
	case 110:
	    return jjMoveStringLiteralDfa23_0(active0, 0x2000L);
	default:
	    break;
	}
	return jjStartNfa_0(21, active0);
    }

    static private final int jjMoveStringLiteralDfa23_0(long old0, long active0) {
	if (((active0 &= old0)) == 0L)
	    return jjStartNfa_0(21, old0);
	try {
	    curChar = input_stream.readChar();
	} catch (java.io.IOException e) {
	    jjStopStringLiteralDfa_0(22, active0);
	    return 23;
	}
	switch (curChar) {
	case 116:
	    if ((active0 & 0x2000L) != 0L)
		return jjStopAtPos(23, 13);
	    break;
	default:
	    break;
	}
	return jjStartNfa_0(22, active0);
    }

    static private final void jjCheckNAdd(int state) {
	if (jjrounds[state] != jjround) {
	    jjstateSet[jjnewStateCnt++] = state;
	    jjrounds[state] = jjround;
	}
    }

    static private final void jjAddStates(int start, int end) {
	do {
	    jjstateSet[jjnewStateCnt++] = jjnextStates[start];
	} while (start++ != end);
    }

    static private final void jjCheckNAddTwoStates(int state1, int state2) {
	jjCheckNAdd(state1);
	jjCheckNAdd(state2);
    }

    static private final void jjCheckNAddStates(int start, int end) {
	do {
	    jjCheckNAdd(jjnextStates[start]);
	} while (start++ != end);
    }

    static private final void jjCheckNAddStates(int start) {
	jjCheckNAdd(jjnextStates[start]);
	jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
	    0xffffffffffffffffL };

    static private final int jjMoveNfa_0(int startState, int curPos) {
	int[] nextStates;
	int startsAt = 0;
	jjnewStateCnt = 19;
	int i = 1;
	jjstateSet[0] = startState;
	int j, kind = 0x7fffffff;
	for (;;) {
	    if (++jjround == 0x7fffffff)
		ReInitRounds();
	    if (curChar < 64) {
		long l = 1L << curChar;
		MatchLoop: do {
		    switch (jjstateSet[--i]) {
		    case 0:
			if ((0x3ff000000000000L & l) != 0L) {
			    if (kind > 23)
				kind = 23;
			    jjCheckNAdd(18);
			} else if (curChar == 39)
			    jjCheckNAddStates(0, 2);
			else if (curChar == 34)
			    jjCheckNAddStates(3, 5);
			break;
		    case 1:
			if ((0xfffffffbffffdbffL & l) != 0L)
			    jjCheckNAddStates(3, 5);
			break;
		    case 3:
			if ((0x8400000000L & l) != 0L)
			    jjCheckNAddStates(3, 5);
			break;
		    case 4:
			if (curChar == 34 && kind > 21)
			    kind = 21;
			break;
		    case 5:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAddStates(6, 9);
			break;
		    case 6:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAddStates(3, 5);
			break;
		    case 7:
			if ((0xf000000000000L & l) != 0L)
			    jjstateSet[jjnewStateCnt++] = 8;
			break;
		    case 8:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAdd(6);
			break;
		    case 9:
			if (curChar == 39)
			    jjCheckNAddStates(0, 2);
			break;
		    case 10:
			if ((0xffffff7fffffdbffL & l) != 0L)
			    jjCheckNAddStates(0, 2);
			break;
		    case 12:
			if ((0x8400000000L & l) != 0L)
			    jjCheckNAddStates(0, 2);
			break;
		    case 13:
			if (curChar == 39 && kind > 22)
			    kind = 22;
			break;
		    case 14:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAddStates(10, 13);
			break;
		    case 15:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAddStates(0, 2);
			break;
		    case 16:
			if ((0xf000000000000L & l) != 0L)
			    jjstateSet[jjnewStateCnt++] = 17;
			break;
		    case 17:
			if ((0xff000000000000L & l) != 0L)
			    jjCheckNAdd(15);
			break;
		    case 18:
			if ((0x3ff000000000000L & l) == 0L)
			    break;
			if (kind > 23)
			    kind = 23;
			jjCheckNAdd(18);
			break;
		    default:
			break;
		    }
		} while (i != startsAt);
	    } else if (curChar < 128) {
		long l = 1L << (curChar & 077);
		MatchLoop: do {
		    switch (jjstateSet[--i]) {
		    case 0:
		    case 18:
			if ((0x7fffffe07fffffeL & l) == 0L)
			    break;
			if (kind > 23)
			    kind = 23;
			jjCheckNAdd(18);
			break;
		    case 1:
			if ((0xffffffffefffffffL & l) != 0L)
			    jjCheckNAddStates(3, 5);
			break;
		    case 2:
			if (curChar == 92)
			    jjAddStates(14, 16);
			break;
		    case 3:
			if ((0x14404410000000L & l) != 0L)
			    jjCheckNAddStates(3, 5);
			break;
		    case 10:
			if ((0xffffffffefffffffL & l) != 0L)
			    jjCheckNAddStates(0, 2);
			break;
		    case 11:
			if (curChar == 92)
			    jjAddStates(17, 19);
			break;
		    case 12:
			if ((0x14404410000000L & l) != 0L)
			    jjCheckNAddStates(0, 2);
			break;
		    default:
			break;
		    }
		} while (i != startsAt);
	    } else {
		int i2 = (curChar & 0xff) >> 6;
		long l2 = 1L << (curChar & 077);
		MatchLoop: do {
		    switch (jjstateSet[--i]) {
		    case 1:
			if ((jjbitVec0[i2] & l2) != 0L)
			    jjAddStates(3, 5);
			break;
		    case 10:
			if ((jjbitVec0[i2] & l2) != 0L)
			    jjAddStates(0, 2);
			break;
		    default:
			break;
		    }
		} while (i != startsAt);
	    }
	    if (kind != 0x7fffffff) {
		jjmatchedKind = kind;
		jjmatchedPos = curPos;
		kind = 0x7fffffff;
	    }
	    ++curPos;
	    if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
		return curPos;
	    try {
		curChar = input_stream.readChar();
	    } catch (java.io.IOException e) {
		return curPos;
	    }
	}
    }

    static final int[] jjnextStates = { 10, 11, 13, 1, 2, 4, 1, 2, 6, 4, 10,
	    11, 15, 13, 3, 5, 7, 12, 14, 16, };
    public static final String[] jjstrLiteralImages = {
	    "",
	    null,
	    null,
	    null,
	    null,
	    null,
	    "\141\154\154\157\167",
	    "\144\145\156\171",
	    "\146\161\141\156",
	    "\144\156",
	    "\147\141",
	    "\162\145\163\157\165\162\143\145",
	    "\143\145\162\164\151\146\151\143\141\164\145",
	    "\163\145\162\166\151\143\145\137\143\154\141\163\163\137\141\163\163\151\147\156\155\145\156\164",
	    "\160\151\154\157\164", "\156\157", "\171\145\163",
	    "\142\154\141\143\153\154\151\163\164",
	    "\163\145\162\166\151\143\145\137\143\154\141\163\163",
	    "\145\170\143\145\160\164", "\160\162\151\166\141\164\145", null,
	    null, null, "\133", "\135", "\173", "\175", "\75", "\50", "\72",
	    "\51", };
    public static final String[] lexStateNames = { "DEFAULT", };
    static final long[] jjtoToken = { 0xffffffc1L, };
    static final long[] jjtoSkip = { 0x3eL, };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[19];
    static private final int[] jjstateSet = new int[38];
    static protected char curChar;

    public BWParserTokenManager(SimpleCharStream stream) {
	if (input_stream != null)
	    throw new TokenMgrError(
		    "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
		    TokenMgrError.STATIC_LEXER_ERROR);
	input_stream = stream;
    }

    public BWParserTokenManager(SimpleCharStream stream, int lexState) {
	this(stream);
	SwitchTo(lexState);
    }

    static public void ReInit(SimpleCharStream stream) {
	jjmatchedPos = jjnewStateCnt = 0;
	curLexState = defaultLexState;
	input_stream = stream;
	ReInitRounds();
    }

    static private final void ReInitRounds() {
	int i;
	jjround = 0x80000001;
	for (i = 19; i-- > 0;)
	    jjrounds[i] = 0x80000000;
    }

    static public void ReInit(SimpleCharStream stream, int lexState) {
	ReInit(stream);
	SwitchTo(lexState);
    }

    static public void SwitchTo(int lexState) {
	if (lexState >= 1 || lexState < 0)
	    throw new TokenMgrError("Error: Ignoring invalid lexical state : "
		    + lexState + ". State unchanged.",
		    TokenMgrError.INVALID_LEXICAL_STATE);
	else
	    curLexState = lexState;
    }

    static protected Token jjFillToken() {
	Token t = Token.newToken(jjmatchedKind);
	t.kind = jjmatchedKind;
	String im = jjstrLiteralImages[jjmatchedKind];
	t.image = (im == null) ? input_stream.GetImage() : im;
	t.beginLine = input_stream.getBeginLine();
	t.beginColumn = input_stream.getBeginColumn();
	t.endLine = input_stream.getEndLine();
	t.endColumn = input_stream.getEndColumn();
	return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    public static Token getNextToken() {
	int kind;
	Token specialToken = null;
	Token matchedToken;
	int curPos = 0;

	EOFLoop: for (;;) {
	    try {
		curChar = input_stream.BeginToken();
	    } catch (java.io.IOException e) {
		jjmatchedKind = 0;
		matchedToken = jjFillToken();
		return matchedToken;
	    }

	    try {
		input_stream.backup(0);
		while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
		    curChar = input_stream.BeginToken();
	    } catch (java.io.IOException e1) {
		continue EOFLoop;
	    }
	    jjmatchedKind = 0x7fffffff;
	    jjmatchedPos = 0;
	    curPos = jjMoveStringLiteralDfa0_0();
	    if (jjmatchedKind != 0x7fffffff) {
		if (jjmatchedPos + 1 < curPos)
		    input_stream.backup(curPos - jjmatchedPos - 1);
		if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
		    matchedToken = jjFillToken();
		    return matchedToken;
		} else {
		    continue EOFLoop;
		}
	    }
	    int error_line = input_stream.getEndLine();
	    int error_column = input_stream.getEndColumn();
	    String error_after = null;
	    boolean EOFSeen = false;
	    try {
		input_stream.readChar();
		input_stream.backup(1);
	    } catch (java.io.IOException e1) {
		EOFSeen = true;
		error_after = curPos <= 1 ? "" : input_stream.GetImage();
		if (curChar == '\n' || curChar == '\r') {
		    error_line++;
		    error_column = 0;
		} else
		    error_column++;
	    }
	    if (!EOFSeen) {
		input_stream.backup(1);
		error_after = curPos <= 1 ? "" : input_stream.GetImage();
	    }
	    throw new TokenMgrError(EOFSeen, curLexState, error_line,
		    error_column, error_after, curChar,
		    TokenMgrError.LEXICAL_ERROR);
	}
    }

}
