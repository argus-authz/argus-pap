PARSER_BEGIN(BWParser)
package org.glite.authz.pap.encoder;
import java.lang.String;
import org.glite.authz.pap.common.xacml.wizard.*;
import org.opensaml.xacml.XACMLObject;
import org.opensaml.xacml.policy.EffectType;
import java.util.List;
import java.util.LinkedList;
import org.glite.authz.pap.common.xacml.utils.PolicyHelper;
import org.glite.authz.pap.common.xacml.utils.PolicySetHelper;
import org.opensaml.xacml.policy.PolicyType;

class BWParser {
//     public static String main(String args[]) throws ParseException {
//         BWParser parser = new BWParser(System.in);
//         try {
//             return parser.Text();  
//         }
//         catch (ParseException e) {
//             System.out.println("EXCEPTION");
//             System.out.println(e);
//         }
//     }
}
PARSER_END(BWParser)


/* WHITE SPACE */

SKIP :
{
   "#" : ONE_LINE_COMMENT
|  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

<ONE_LINE_COMMENT> SKIP:			// A one-line comment simply discards text until
{						// the next newline character is detected
  <( "\n" | "#" )> : DEFAULT
}
<ONE_LINE_COMMENT> MORE:			// Just keep going.....
{
  < ~[] >
}


TOKEN:
{
   <PERMIT:      "permit">
|  <DENY:        "deny">
|  <DESCRIPTION: "description">
|  <OBLIGATION:  "obligation">
|  <ACTION:      "action">
|  <RULE:        "rule">
|  <RESOURCE:    "resource">
|  <PRIVATE:     "private">
|  <STRING:         "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"">
|  < ID:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'">
| <ID2: (["a"-"z", "_", "A"-"Z", "0"-"9"])+>
| <HEX:    "0x" (["0"-"9", "a"-"f", "A"-"F"])+>
| <NUMBER: (["0"-"9"])+>
}


List<XACMLWizard> Text() :
{
  XACMLWizard psw = null;
  List<XACMLWizard> sets = new LinkedList<XACMLWizard>();
}
{ 
  (psw=Resource() { sets.add(psw); 
})+
  { return sets; }
}


XACMLWizard Resource() :
{
  List<MixIn> policyContents = new LinkedList<MixIn>();
  MixIn content=null;
  String t = null;
  String t3 = null;
  String t4 = null;
  List<AttributeWizard> obligationContent = new LinkedList<AttributeWizard>();
  List<MixIn> mixinContent = new LinkedList<MixIn>();  
  AttributeWizard attr = null;
  MixIn mixin;
}
{
  <RESOURCE> t=TextString() "{" ( content=ResourceContents() { policyContents.add(content); })+ "}" {
    PolicySetWizard psw = new PolicySetWizard(new AttributeWizard("resource", t));
    for (MixIn mixedin : policyContents) {
      if (mixedin.policy != null) {
        psw.addPolicy(mixedin.policy);
      }
      if (mixedin.obligation != null)
        psw.addObligation(mixedin.obligation);
      if (mixedin.description != null)
        psw.setDescription(mixedin.description);
    }     
    return psw;
  } 
|   <ACTION> t3=TextString() "{" (mixin=ActionContent() {mixinContent.add(mixin);} )+ "}" {
      PolicyWizard pw = new PolicyWizard(new AttributeWizard("action", t3));
      for (MixIn mixedin : mixinContent) {
        if (mixedin.rule != null)
          pw.addRule(mixedin.rule);
        if (mixedin.obligation != null)
          pw.addObligation(mixedin.obligation);
        if (mixedin.description != null)
          pw.setDescription(mixedin.description);
      }     
      return pw;
    }

|   <PRIVATE> <ACTION> t4=TextString() "{" ( mixin=ActionContent() {mixinContent.add(mixin);} )+ "}" {
      PolicyWizard pw2 = new PolicyWizard(new AttributeWizard("action", t4));
      for (MixIn mixedin : mixinContent) {
        if (mixedin.rule != null)
          pw2.addRule(mixedin.rule);
        if (mixedin.obligation != null)
          pw2.addObligation(mixedin.obligation);
        if (mixedin.description != null)
          pw2.setDescription(mixedin.description);
      }     
      pw2.setPrivate(true);
      return pw2;
    }

}

MixIn ResourceContents() :
{
  Token t1 = null;
  String t2 = null;
  String t3 = null;
  String t4 = null;
  List<AttributeWizard> obligationContent = new LinkedList<AttributeWizard>();
  List<MixIn> mixinContent = new LinkedList<MixIn>();  
  AttributeWizard attr = null;
  MixIn mixin;
}
{
    <DESCRIPTION> t1=<STRING> {return new MixIn(t1.toString()); }
|   <OBLIGATION> t2=TextString() "{" (attr=ObligationContent() {obligationContent.add(attr); })+ "}" {
      return new MixIn(new ObligationWizard(t2, obligationContent)); 
    }
|   <ACTION> t3=TextString() "{" (mixin=ActionContent() {mixinContent.add(mixin);} )+ "}" {
      PolicyWizard pw = new PolicyWizard(new AttributeWizard("action", t3));
      for (MixIn mixedin : mixinContent) {
        if (mixedin.rule != null)
          pw.addRule(mixedin.rule);
        if (mixedin.obligation != null)
          pw.addObligation(mixedin.obligation);
        if (mixedin.description != null)
          pw.setDescription(mixedin.description);
      }     
      return new MixIn(pw);
    }

|   <PRIVATE> <ACTION> t4=TextString() "{" ( mixin=ActionContent() {mixinContent.add(mixin);} )+ "}" {
      PolicyWizard pw2 = new PolicyWizard(new AttributeWizard("action", t4));
      for (MixIn mixedin : mixinContent) {
        if (mixedin.rule != null)
          pw2.addRule(mixedin.rule);
        if (mixedin.obligation != null)
          pw2.addObligation(mixedin.obligation);
        if (mixedin.description != null)
          pw2.setDescription(mixedin.description);
      }     
      pw2.setPrivate(true);
      return new MixIn(pw2);
    }
}     

AttributeWizard ObligationContent() :
{
  String t1 = null, t2=null;
}
{
  t1=TextString() "=" t2=TextString() {
    return new AttributeWizard(t1, t2);
  }
}

MixIn ActionContent() :
{
  String t1 = null;
  String t2 = null;
  String t3 = null;
  String description = null;
  List<AttributeWizard> ruleContent = new LinkedList<AttributeWizard>();
  List<AttributeWizard> obligationContent = new LinkedList<AttributeWizard>();
  EffectType effect = null;
  AttributeWizard attr = null;
}
{
  <DESCRIPTION> t1=TextString() { 
    return new MixIn(t1); 
  }

| <OBLIGATION> t2=TextString() "{" 
    ( attr=ObligationContent() {obligationContent.add(attr); }
     )+ 
  "}" {
    return new MixIn(new ObligationWizard(t2, obligationContent));
  }
| <RULE> effect=RuleEffect() "{" 
     ( 
       attr=RuleContent() {ruleContent.add(attr);} 
     )+ 
  "}" {
    return new MixIn(new RuleWizard(ruleContent, effect));
  }
}

EffectType RuleEffect() :
{boolean result;}
{
  <DENY>   { return EffectType.Deny; }
| <PERMIT> { return EffectType.Permit; }
}

AttributeWizard RuleContent() :
{
  String t1=null, t2=null;
}
{
  t1=TextString() "=" t2=TextString() {
    return new AttributeWizard(t1, t2);
  }
}

String TextString():
{
  Token t = null;
  String s = null;
}
{
  t=<STRING>
  { 
    s = t.toString();
    return s.substring(1, s.length()-1); 
  }
| t=<ID>
  { 
    s = t.toString();
    return s.substring(1, s.length()-1); 
  }
| t=<ID2>
  { return t.toString(); } 
}
